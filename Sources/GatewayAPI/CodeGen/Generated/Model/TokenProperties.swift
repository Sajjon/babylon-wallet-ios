//
// TokenProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TokenProperties: Sendable, Codable, Hashable {

    public let name: String
    public let description: String
    public let iconUrl: String
    public let url: String
    public let symbol: String
    /** If true, the token is allowed to be minted/burned by the owner. */
    public let isSupplyMutable: Bool
    public let granularity: String
    public let owner: AccountIdentifier?

    public init(name: String, description: String, iconUrl: String, url: String, symbol: String, isSupplyMutable: Bool, granularity: String, owner: AccountIdentifier? = nil) {
        self.name = name
        self.description = description
        self.iconUrl = iconUrl
        self.url = url
        self.symbol = symbol
        self.isSupplyMutable = isSupplyMutable
        self.granularity = granularity
        self.owner = owner
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case iconUrl = "icon_url"
        case url
        case symbol
        case isSupplyMutable = "is_supply_mutable"
        case granularity
        case owner
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(iconUrl, forKey: .iconUrl)
        try container.encode(url, forKey: .url)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(isSupplyMutable, forKey: .isSupplyMutable)
        try container.encode(granularity, forKey: .granularity)
        try container.encodeIfPresent(owner, forKey: .owner)
    }
}

